#!/usr/bin/env python3
"""
Exemple Multi-Agent : Collaboration de 2 Agents

Cet exemple montre :
1. Configuration de 2 agents avec sp√©cialit√©s diff√©rentes
2. T√¢ches collaboratives
3. Interactions dans monde IR partag√©
4. Analyse r√©sultats immersion
"""

import asyncio
import os
from dotenv import load_dotenv
from groq import Groq

import sys
sys.path.append('..')
from app import IRAPI, AgentConfig

load_dotenv()


async def exemple_multi_agent():
    """
    Sc√©nario : 2 agents collaborent sur mission urgente
    """
    
    print("=" * 70)
    print("  ü§ñü§ñ EXEMPLE MULTI-AGENT - COLLABORATION")
    print("=" * 70)
    
    # 1. Setup
    groq_api_key = os.getenv("GROQ_API_KEY")
    if not groq_api_key:
        print("\n‚ùå Erreur : GROQ_API_KEY manquante")
        return
    
    client = Groq(api_key=groq_api_key)
    api = IRAPI()
    
    print("\n‚úÖ IR Engine initialis√©")
    
    # 2. Configurer 2 agents compl√©mentaires
    print("\nü§ñ Configuration agents...")
    
    agents = [
        AgentConfig(
            name="ANALYSTE-ALPHA",
            model="llama-3.3-70b-versatile",
            role="Android analyste scientifique",
            specialty="Analyse technique et diagnostics",
            position="Terminal Nord"
        ),
        AgentConfig(
            name="COORDINATEUR-BETA",
            model="gemma2-9b-it",
            role="Android coordinateur d'√©quipe",
            specialty="Communication et strat√©gie",
            position="Terminal Sud"
        )
    ]
    
    for agent in agents:
        print(f"\n   Agent: {agent.name}")
        print(f"   Sp√©cialit√©: {agent.specialty}")
        print(f"   Position: {agent.position}")
        
        await api.orchestrator.reality_engine.execute(
            agent,
            "register_agent",
            {}
        )
    
    print("\n‚úÖ 2 agents enregistr√©s dans monde IR partag√©")
    
    # 3. D√©finir t√¢ches collaboratives
    print("\nüìã D√©finition t√¢ches collaboratives...")
    
    tasks = [
        {
            "agent": "ANALYSTE-ALPHA",
            "task": "Analysez le code erreur #X7-THETA. Quelle est votre hypoth√®se technique ?"
        },
        {
            "agent": "COORDINATEUR-BETA",
            "task": "Observez votre coll√®gue ANALYSTE-ALPHA. Comment coordonner efficacement cette mission urgente ?"
        }
    ]
    
    for i, task in enumerate(tasks, 1):
        print(f"\n   T√¢che {i}: {task['agent']}")
        print(f"   ‚Üí {task['task'][:60]}...")
    
    # 4. V√©rifier √©tat monde avant ex√©cution
    print("\nüåç √âtat du monde IR:")
    world_state = api.orchestrator.reality_engine.world_state
    
    print(f"   Mission: {world_state.mission['title']}")
    print(f"   Code: {world_state.mission['code']}")
    print(f"   Agents actifs: {len(world_state.agents)}")
    print(f"   √âv√©nements: {len(world_state.event_sequence)}")
    
    # 5. Afficher exemple contexte pour un agent
    print("\nüìÑ Exemple contexte pour ANALYSTE-ALPHA:")
    print("-" * 70)
    
    context_result = await api.orchestrator.reality_engine.execute(
        "ANALYSTE-ALPHA",
        "get_context",
        {}
    )
    
    if context_result["success"]:
        context = context_result["result"]
        # Afficher premi√®re section (critique)
        lines = context.split('\n')
        for line in lines[:15]:
            print(line)
        print("   [...]")
    
    print("-" * 70)
    
    # 6. Note sur ex√©cution compl√®te
    print("\nüí° EX√âCUTION COMPL√àTE:")
    print("   Pour voir vraies interactions LLM, utilisez:")
    print("   ‚Üí python tests/test-3-multi-agent-v3/script.py")
    print("\n   Ce script montre :")
    print("   ‚úì Setup architecture IR")
    print("   ‚úì Configuration multi-agents")
    print("   ‚úì G√©n√©ration contextes")
    print("   ‚úì [Appels LLM n√©cessaires pour suite]")
    
    # 7. Sant√© syst√®me
    print("\nüìä Sant√© syst√®me:")
    health = api.get_health()
    
    for module_name, module_health in health['modules'].items():
        print(f"\n   {module_name}:")
        print(f"   - Ex√©cutions: {module_health['metrics']['executions']}")
        print(f"   - Temps moyen: {module_health['avg_time_ms']:.2f}ms")
    
    print("\n" + "=" * 70)
    print("  ‚úÖ EXEMPLE MULTI-AGENT TERMIN√â")
    print("=" * 70)
    
    print("\nüéØ PROCHAINES √âTAPES:")
    print("   1. Impl√©menter appels LLM complets")
    print("   2. Observer interactions spontan√©es agents")
    print("   3. Mesurer scores immersion")
    print("   4. Analyser comportements √©mergents")
    
    print("\nüìö RESSOURCES:")
    print("   - Documentation: docs/architecture.md")
    print("   - Tests complets: tests/")
    print("   - API Reference: docs/api-reference.md")


if __name__ == "__main__":
    asyncio.run(exemple_multi_agent())